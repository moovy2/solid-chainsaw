#!/usr/bin/env perl

use v5.18;
use FindBin;
use lib $FindBin::Bin;
use base 'YAMLTestSuite';
use Capture::Tiny ':all';
use Cwd;
use Encode;

my $container_id;

sub kill_docker_container {
  delete $SIG{INT};
  if ($container_id) {
    my ($out, $err, $rc) = capture {
      system("docker kill $container_id");
    };
    die "docker kill failed" unless $rc == 0;
  }
}

END {
  kill_docker_container();
}

BEGIN {
  if ($ENV{YTS_TEST_RUNNER}) {
    my $cwd = getcwd;
    my ($out, $err, $rc) = capture {
      system("docker run -d -v $cwd:/host yamlio/yaml-test-runtimes:0.0.2 sleep 600");
    };
    die "docker run failed" unless $rc == 0;
    chomp $out;
    $container_id = $out;
  }

  $SIG{INT} = \&kill_docker_container;
}

my @test_runners = (qw<
  yaml-reference-parser
  hs-reference-yeast
  c-libyaml-event
  c-libfyaml-event
  perl-pp-event
  js-yaml-event
  py-pyyaml-event
  go-yaml-test
  nim-nimyaml-event
  hs-hsyaml-event
  java-snakeyaml-event
  py-ruamel-event
  dotnet-yamldotnet-event
>);

my @tag_names = (qw<
  alias
  anchor
  binary
  comment
  complex-key
  directive
  double
  duplicate-key
  edge
  empty
  empty-key
  error
  explicit-key
  flow
  folded
  footer
  header
  indent
  literal
  local-tag
  mapping
  missing
  scalar
  sequence
  simple
  single
  spec
  tag
  unknown-tag
  whitespace
>);

main->new->run([@ARGV]);

sub make {
  my ($self) = @_;

  my $id = $self->{ID};
  my $data = $self->{data};

  my $name = $self->{name};

  my $skip = $data->{skip} ? 'X' : '';

  my $yaml = $data->{yaml};
  $yaml =~ s/"/""/g;
  $yaml = qq{"$yaml"};

  my $tree = $data->{tree};
  $tree =~ s/"/""/g;
  chomp $tree;
  $tree = qq{"$tree"};
  $tree = 'ERROR' if $data->{fail};

  my $play = $self->play_url($data->{yaml});

  print STDERR "\r\e[K$id";
  my @test = $self->run_tests($data->{yaml});
  my @tags = $self->get_tags($data->{tags});

  my $tsv = encode_utf8 join("\t",
    (
      $play,
      $id,
      $name,
      $yaml,
      $tree,
      @test,
      @tags,
    )
  ) . "\n";

  print $tsv;
}

sub run_tests {
  my ($self, $yaml) = @_;
  $yaml = $self->unescape($yaml);

  if (not $ENV{YTS_TEST_RUNNER}) {
    return ('') x scalar(@test_runners);
  }
  my ($out, $err, $rc) = capture {
    open my $pipe, '|-',
      "docker exec -i $container_id /host/bin/run-all-parsers @test_runners"
        or die;
    print $pipe encode_utf8($yaml);
    close $pipe;
    return 0;
  };
  die "docker run failed:\nrc: $rc\nstdout:\n$out\nstderr:\n$err\n"
    unless $rc == 0;

  my @tests = split /\t/, "$out\tEND";
  pop @tests;
  return @tests;
}

sub get_tags {
  my ($self, $tags) = @_;
  $tags ||= '';
  my @tags = split /\s+/, $tags;
  my @list;
  for my $tag (@tag_names) {
    if (grep {$_ eq $tag} @tags) {
      push @list, 'x';
    }
    else {
      push @list, '';
    }
  }
  return @list;
}

sub final {
  my ($self) = @_;
  print STDERR "\r\e[K\n\nWrote $self->{make} rows.\n";
}
